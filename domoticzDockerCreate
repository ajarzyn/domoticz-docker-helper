#!/bin/bash

# TO DO think to rather add PATH than choose proper docker binary path
# echo $PATH

# Get user UID and GID
PUID=$(id -u $USER)
GUID=$(id -g $USER)

if [ $PUID -eq 0 ] ; then
	echo "Do not run script with sudo. It will be requested if necessary."
	exit 1
fi

function usage
{
	ECHO_F="echo -e"
	$ECHO_F "Usage: $0 [OPTION] ... "
	$ECHO_F "-nb,  --no-build\t\tDo not build image."
	$ECHO_F "-nc,  --no-create\t\tDoes not create container locally."
	$ECHO_F "-ct,  --create-test\t\tCreate test container with different ports."
	$ECHO_F "-dp,  --debug-python\t\tAdd port to container for  debuging python plugins."
	$ECHO_F "-ex,  --export-image\t\tExport image to file. And copy file to server."
	$ECHO_F "-ui,  --upload-image\t\tUpload image to the server docker image repository."
	$ECHO_F "-li,  --load-image [filename]\tLoad docker image from file to docker image repository."
	$ECHO_F "-tg,  --tag\t\tSupply tag of the image to be loaded format [:tag]"
	$ECHO_F "-lp,  --local-passwd\t\tPass local user password as and argument."
	$ECHO_F "-sp,  --server-passwd\t\tPass server user password as and argument."
	$ECHO_F "-h,   --help\t\t\tDisplays this help."
	$ECHO_F "\t"
	exit 0
}

NO_BUILD=0
NO_CREATE=0
CREATE_TEST=0
DEBUG_PYTHON=0
EXPORT_IMAGE=0
UPLOAD_IMAGE=0
LOAD_IMAGE=0

while [ "$1" != "" ] ; do
	case $1 in
		-nb  | --no-build )		NO_BUILD=1
						;;
		-nc  | --no-create )		NO_CREATE=1
						;;
		-ct  | --create-test )		CREATE_TEST=1
						TEST=-ct
						;;					
		-dp  | --debug-python )		DEBUG_PYTHON=1
						;;
		-ex  | --export-image )		EXPORT_IMAGE=1
						;;
		-ui  | --upload-image )		UPLOAD_IMAGE=1
						;;
		-li  | --laod-image )		LOAD_IMAGE=1
						IMAGE_FILE_TO_LOAD=$2
						shift
						;;
		-tg  | --tag )			IMG_TAG=$2
						shift
						;;
		-lp  | --local-passwd )		LOC_PASS=$2
						shift
						;;
		-sp  | --server-passwd )	SRV_PASS=$2
						shift
						;;
		-h   | --help )			usage
						exit 0
						;;
		* )				usage
						exit 1
	esac
	shift
done

# Script variables

DOCKER_POSSIBLE_PATHS=("docker" "/usr/bin/docker" "/usr/local/bin/docker")
for D_P in "${DOCKER_POSSIBLE_PATHS[@]}"
do
	if [ -f $D_P ] ; then
		V_DOCKER_PATH=$D_P
		break
	fi
done
echo docker path set to: "$V_DOCKER_PATH"

if [ -z "$V_DOCKER_PATH" ] ; then
	echo "No docker binary have been found."
	exit 1
fi

# Get local password if neccessary and set sudo
function locl_sudo() {
	echo ${LOC_PASS} | sudo -S $@
}

function DOCKER_PATH(){
	# echo "DOCKER_PATH function is called."
	# echo $V_DOCKER_PATH $@
	if [ $SUDO_NEEDED -eq 1 ] ; then
		locl_sudo "$V_DOCKER_PATH $@"
	else
		$V_DOCKER_PATH "$@"
	fi
}

SUDO_NEEDED=0
DOCKER_PATH images > /dev/null
if [ $? -eq 1 ] ; then
	SUDO_NEEDED=1
	if [ -z "$LOC_PASS" ] ; then
		echo "Enter local user sudo password."
		read -s LOC_PASS
	fi

	DOCKER_PATH images > /dev/null
	if [ $? -eq 1 ] ; then
		echo "No permission to run docker."
		exit 1
	fi
fi

# Get server password if neccessary
if [ -z "$SRV_PASS" ] && [ $UPLOAD_IMAGE -eq 1 ] || [ $EXPORT_IMAGE -eq 1 ]  ; then
	echo "Insert password for server usr."
	read -s SRV_PASS
fi

D_IMAGE="DOCKER_PATH image"
D_CONT="DOCKER_PATH container"
D_CREATE="DOCKER_PATH create"
D_BUILD="DOCKER_PATH build"
D_SAVE="DOCKER_PATH save"
D_LOAD="DOCKER_PATH load"
D_TAG="DOCKER_PATH tag"
D_IMG_CREATION_DATE=(DOCKER_PATH inspect -f "{{.Created}}")

# Server paramteres
source config.sh


# Docker environment
TZ="Europe/Warsaw"
CNT_WEB_PORT=8080
CNT_C1_PORT=6144
CNT_C2_PORT=1443

if [ $CREATE_TEST -eq 0 ] ; then
	CONT_NAME=domoticz
	WEB_PORT=8080
	C1_PORT=6144
	C2_PORT=1443
else
	CONT_NAME=domoticz_test
	WEB_PORT=8090
	C1_PORT=6244
	C2_PORT=1543
fi

IMAGE=domoticz/local
LATEST_TAG=:latest
D_IMG_CREATION_DATE+=($IMAGE$IMG_TAG)
MP="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

PLUGINS_PATH=$MP/plugins
CONFIG_PATH=$MP/config
LOG_PATH=$MP/logs
DB_PATH=$MP/db

exists () {
	$1 ls -a | grep "$2"
}

change_latest_image_tag () {
	#Backup old image and build new
	# OLD_TAG=$("${D_IMG_CREATION_DATE[@]}") | sed "s/[^[:alnum:]-]//g"
	TAG=$("${D_IMG_CREATION_DATE[@]}")
	OLD_TAG=$(date -d $TAG +'%Y%m%d%H%M%S')
	echo "$OLD_TAG"
	if [ -z "$OLD_TAG" ] ; then
		$D_TAG $IMAGE$LATEST_TAG $IMAGE:$OLD_TAG
	fi
}

if [ $NO_BUILD -eq 0 ] ; then
	change_latest_image_tag
	#Build new image
	$D_BUILD --tag $IMAGE$LATEST_TAG .
	if [ 0 -ne $? ] ; then
		echo "Error while building an image. Docker build exited with $? code."
		exit 1
	fi
fi

if [ $LOAD_IMAGE -eq 1 ] ; then
	change_latest_image_tag
	echo $(pwd)
	echo $IMAGE_FILE_TO_LOAD
	$D_LOAD -i $IMAGE_FILE_TO_LOAD
fi

if [ $NO_CREATE -ne 1 ] ; then
	exists "$D_CONT" $CONT_NAME
	if [ 0 -eq $? ] ; then
		$D_CONT stop $CONT_NAME
		$D_CONT rm $CONT_NAME
	fi

	CREATE_COMMAND="$D_CREATE \
		--name=$CONT_NAME \
		-e PUID=$PUID \
		-e GUID=$GUID \
		-e TZ=$TZ \
		-p $WEB_PORT:$CNT_WEB_PORT \
		-p $C1_PORT:$CNT_C1_PORT \
		-p $C2_PORT:$CNT_C2_PORT \
		--restart=always"
	if [ -e "/dev/ttyACM0" ] ; then
		CREATE_COMMAND=$CREATE_COMMAND" --device=/dev/ttyACM0"
	fi
	if [ $DEBUG_PYTHON -eq 1 ] ; then
		CREATE_COMMAND=$CREATE_COMMAND" -p 4444:4444"
	fi
	CREATE_COMMAND=$CREATE_COMMAND" -v $CONFIG_PATH:/config \
		$IMAGE$IMG_TAG"
	
	# echo $CREATE_COMMAND
	$CREATE_COMMAND

	exists "$D_CONT" $CONT_NAME
	if [ 0 -eq $? ] ; then
		echo "Creating container named: $CONT_NAME succeed."
		$D_CONT start $CONT_NAME
	else
		echo "Failed to create container."
	fi
fi # if [ $NO_CTEATE -ne 1 ]

TAG=$("${D_IMG_CREATION_DATE[@]}")
TAG=$(date -d $TAG +'%Y%m%d%H%M%S')
EXPORTED_FILE="${TAG}_domoticz.img"

if [ $EXPORT_IMAGE -eq 1 ] ; then
	$D_SAVE -o $EXPORTED_FILE $IMAGE$IMG_TAG
	echo "You will copy docker image on server. You will be prompted for server user's password."
	SCP="sshpass -p ${SRV_PASS} "$SRV_SUDO" scp -P $SSH_PORT $EXPORTED_FILE $USER@$IP:$SERVER_PATH"
#	echo $SCP
	$SCP
fi

if [ $UPLOAD_IMAGE -eq 1 ] ; then
	SSH_COMMAND="sshpass -p ${SRV_PASS} ssh -t ${USER}@${IP} -p ${SSH_PORT} "
	echo "Removing script file from server."
	${SSH_COMMAND}rm -f $SERVER_SCRIPT_PATH
	echo "Copy script to the server."
	sshpass -p ${SRV_PASS} scp -P $SSH_PORT $0 $USER@$IP:$SERVER_PATH
	echo "Run script on server."
	${SSH_COMMAND}"chmod +x $SERVER_SCRIPT_PATH; $SERVER_SCRIPT_PATH -nb $TEST -li $SERVER_PATH$EXPORTED_FILE -lp ${SRV_PASS}"
fi

